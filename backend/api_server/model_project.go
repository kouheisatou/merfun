/*
Blockchain Transactions API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Project type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Project{}

// Project struct for Project
type Project struct {
	ProjectId *string `json:"project_id,omitempty"`
	ProjectTitle *string `json:"project_title,omitempty"`
	ImageBase64 *string `json:"image_base64,omitempty"`
}

// NewProject instantiates a new Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProject() *Project {
	this := Project{}
	return &this
}

// NewProjectWithDefaults instantiates a new Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithDefaults() *Project {
	this := Project{}
	return &this
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *Project) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *Project) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *Project) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetProjectTitle returns the ProjectTitle field value if set, zero value otherwise.
func (o *Project) GetProjectTitle() string {
	if o == nil || IsNil(o.ProjectTitle) {
		var ret string
		return ret
	}
	return *o.ProjectTitle
}

// GetProjectTitleOk returns a tuple with the ProjectTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetProjectTitleOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectTitle) {
		return nil, false
	}
	return o.ProjectTitle, true
}

// HasProjectTitle returns a boolean if a field has been set.
func (o *Project) HasProjectTitle() bool {
	if o != nil && !IsNil(o.ProjectTitle) {
		return true
	}

	return false
}

// SetProjectTitle gets a reference to the given string and assigns it to the ProjectTitle field.
func (o *Project) SetProjectTitle(v string) {
	o.ProjectTitle = &v
}

// GetImageBase64 returns the ImageBase64 field value if set, zero value otherwise.
func (o *Project) GetImageBase64() string {
	if o == nil || IsNil(o.ImageBase64) {
		var ret string
		return ret
	}
	return *o.ImageBase64
}

// GetImageBase64Ok returns a tuple with the ImageBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetImageBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.ImageBase64) {
		return nil, false
	}
	return o.ImageBase64, true
}

// HasImageBase64 returns a boolean if a field has been set.
func (o *Project) HasImageBase64() bool {
	if o != nil && !IsNil(o.ImageBase64) {
		return true
	}

	return false
}

// SetImageBase64 gets a reference to the given string and assigns it to the ImageBase64 field.
func (o *Project) SetImageBase64(v string) {
	o.ImageBase64 = &v
}

func (o Project) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Project) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.ProjectTitle) {
		toSerialize["project_title"] = o.ProjectTitle
	}
	if !IsNil(o.ImageBase64) {
		toSerialize["image_base64"] = o.ImageBase64
	}
	return toSerialize, nil
}

type NullableProject struct {
	value *Project
	isSet bool
}

func (v NullableProject) Get() *Project {
	return v.value
}

func (v *NullableProject) Set(val *Project) {
	v.value = val
	v.isSet = true
}

func (v NullableProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProject(val *Project) *NullableProject {
	return &NullableProject{value: val, isSet: true}
}

func (v NullableProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


